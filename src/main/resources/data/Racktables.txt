Racktables
Racktables — система учета и настройки сетевого оборудования. Поиск устройств осуществляется с помощью специального языка запросов. Например: ({Huawei} or {Cisco}) and {DC_VLA} — выдаст все устройства марок Huawei и Cisco в датацентре Владимир.

При работе в спешке сетевики-марсиане иногда промахиваются по клавиатуре и отправляют невалидный запрос: то скобку забудут, то пробел пропустят. Средний RTT до марса — 20 минут, что слишком много для того, чтобы отправлять невалидные запросы.

Необходимо написать валидатор, который может локально отловить ошибки и позволит не тратить лишнее время на пустые запросы.

Язык запросов:

{tag} — тег, который может присваиваться устройству. Название тега должно содержать хотя бы один печатный символ.

[predicate] — предикат, скрывает под собой набор тегов. Название предиката должно содержать хотя бы один печатный символ.

Оператор — строка, содержащая хотя бы один печатный символ, соединяющая два тега/оператора (бинарный оператор) или стоящая перед тегом/оператором (унарный):
{tag} or [predicate] — бинарный оператор or
[predicate] contain {tag} — бинарный оператор contain
{tag}contains in[predicate] — бинарный оператор contains in
not {tag} — унарный оператор not
foo bar {tag} — унарный оператор foo bar

Возможность группировки. Также к группам можно применять операторы:
({tag} or [predicate]) and {tag-2}
(({tag} or [predicate]) and (not {tag-2} or {tag-3}))
not ({tag-2} or {tag-3})

Не разрешены:

Группы без тегов/предикатов:
() and {foo}
(not) and {bar}
Операторы, если после него нет валидного тега/предиката:
{foo} and
{foo} and []
Формат ввода
Первая строка содержит число
�
n (
1
≤
�
≤
1
0
5
1≤n≤10
5
 ) — количество запросов.

Далее следуют
�
n строк длиной
�
k (
1
≤
�
≤
100
1≤k≤100) с запросами.

Формат вывода
Выведете
�
n строк:

Если введенный запрос верен — valid

Если введенный запрос неверен — invalid

Пример
Ввод
8
{foo]
{foo}
[bar]
[bar] and {}
[bar] or {foo}
not {foo}
not {foo} and ({foo}  or )
not {foo} and ([bar] or {foo-2})
Вывод
invalid
valid
valid
invalid
valid
valid
invalid
valid