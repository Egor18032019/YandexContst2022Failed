
E. Облачные вычисления
Язык 	Ограничение времени 	Ограничение памяти 	Ввод 	Вывод
Все языки 	6 секунд 	42Mb 	input.txt 	стандартный вывод или output.txt
GNU C++20 10.2 	4 секунды 	16Mb
C# (MS .Net 6.0)+ASP 	4 секунды 	16Mb
Python 3.7 (PyPy 7.3.3) 	10 секунд 	42Mb
Для распознавания облаков Зелибоба и Алиса Селезнева пишут программы на специальном языке Cloud++. Его синтаксис содержит лишь следующие элементы:

    строчные английские буквы a - z;
    знаки математических операций: +, −, ∗, ∕, =;
    скобки { и };
    пробел.

По правилам языка Cloud++ фигурные скобки должны образовывать «правильную скобочную последовательность» — последовательность из «{» и «}» такая, что существует хотя бы одно разбиение всех скобок последовательности на пары «{» и «}», для которых верно:

    в любой паре порядковый номер «{» в последовательности меньше, чем у соответствующей ей «}».
    каждая скобка относится ровно к одной паре из разбиения.

Например, последовательность «{{}{}}{}» правильная, так как существует разбиение (1,6), (2,3), (4,5), (7,8) (скобки нумеруются с 1 слева направо).

Примеры неправильных скобочных последовательностей:

    «{{{}» неправильная, так как в единственно возможном разбиении (1,4), (2,4), (3,4) скобка 4 используется во всех трёх парах.
    «}{» неправильная, так как в единственно возможном разбиении (2,1) позиция скобки «{» больше, чем позиция «}».
    «{{» неправильная, так как невозможно построить ни одной пары без скобок «}».

Алиса написала новую программу, но поймала ошибку компиляции. Компилятор утверждает, что последовательность скобок в программе отличается от правильной наличием ровно одной лишней скобки (правда не уточняет, какая это скобка и в какой она позиции).

Зелибоба не доверяет компиляторам (слишком они подозрительно себя ведут). Поэтому он просит вас, как главного специалиста по ремонту кофемашин, проверить правдивость слов компилятора.

Для заданного текста программы, написанной Алисой, выведите наименьшую позицию символа скобки (открывающей или закрывающей), удаление которой сделает последовательность скобок в программе правильной.

Формат ввода
Обратите внимание, что в данной задаче разрешен только ввод из файла «input.txt».

В единственной строке файла содержится строка S (1≤∣∣S∣∣≤5⋅107) — программа на языке Cloud++. Строка гарантированно завершается символом перевода строки.

Гарантируется, что строка S содержит символы только из указанных ниже:

    строчные английские буквы a - z;
    знаки математических операций: +, −, ∗, ∕, =;
    скобки { и };
    пробел.

Формат вывода
Если последовательность скобок в программе можно сделать правильной, удалив ровно одну скобку, то выведите наименьшую позицию такой скобки. В ином случае выведите число −1.

Позиции считаются, начиная от 1. Пробелы также считаются символами и учитываются при подсчёте позиции.
Пример 1
Ввод
Вывод

a + b = b + a



-1

Пример 2
Ввод
Вывод

d + {a + {b + c} = {a + b + } c + d



5

Пример 3
Ввод
Вывод

{a{{b + c} = ab + bc



-1

Примечания
Первый тестовый пример

Последовательность скобок пустая, а значит она уже правильная, ничего удалять не нужно — поэтому ответом является −1.

Второй тестовый пример

Обратите внимание на нумерацию символов в начале строки:

    d
    пробел
    +
    пробел
    {
    a
    пробел
    +
    пробел
    {
    a
    т.д.

Последовательность скобок «{{}{}» отличается от правильной ровно одной лишней скобкой. Чтобы сделать её правильной, необходимо удалить одну из двух открывающих скобок в начале скобочной последовательности (позиции в строке 5 и 10). Так как требуется удалить скобку на наименьшей позиции, то ответом является 5.

Обратите внимание, что всё выражение даже после удаления не должно быть / стать корректным — необходимо лишь восстановить правильность скобочной последовательности.

Третий тестовый пример

Последовательность скобок «{{{}» невозможно сделать правильной удалением ровно одной скобки — поэтому ответ −1.

